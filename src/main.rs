//! CLI entry point
use crypto_app::cli::{self, Args};
use clap::Parser;
use crypto_app::core::io::{file, folder};

fn main() {
    let args = cli::Args::parse();
    
    match &args.command {
        cli::Command::EncryptFile { password, input, output } => {
            if let Err(e) = file::encrypt_file(input, output, password) {
                eprintln!("‚ùå–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {}üíß", e);
            } else {
                println!("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output.display());
            }
        }
        cli::Command::DecryptFile { password, input, output } => {
            if let Err(e) = file::decrypt_file(input, output, password) {
                eprintln!("‚ùå–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {}", e);
            } else {
                println!("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output.display());
            }
        }
        cli::Command::EncryptDir { password, input, output } => {
            if let Err(e) = folder::encrypt_directory(input, output, password) {
                eprintln!("–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {}", e);
            } else {
                println!("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output.display());
            }
        }
        cli::Command::DecryptDir { password, input, output } => {
            if let Err(e) = folder::decrypt_directory(input, output, password) {
                eprintln!("–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {}", e);
            } else {
                println!("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {}", output.display());
            }
        }
    }
}